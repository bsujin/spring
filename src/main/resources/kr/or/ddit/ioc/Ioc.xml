<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- userDao, userService 생성 -->
	
	<!-- bean : 스프링 빈을 선언할 때 사용 -->
	<!-- id : 스프링 컨테이너에서 관리할 때 사용할 스프링 빈의 이름 - 중복이 되면 안된다 (식별 불가) -->

	<!-- userDao 스프링 빈 선언 UserDaoImpl userDao = new UserDaoImpl(); -->
	<bean id="userDao" class="kr.or.ddit.user.repository.UserDaoImpl" />

		<!-- userService 스프링 빈 선언 
		UserService userService = new UserServiceImpl();
		userService.getUser("brown");
			-> 실행 x (에러)
		
		property == filed, setter 를 의미
			value : 문자열, 숫자
			ref : 다른 스프링 빈, 주입받고 싶은 스프링 빈 이름을 기술  
		property 엘레멘트를 이용하여 다른 스프링 빈을  (DI-Dependency Injection) 주입
		
		 userService - 다른 스프링 빈을 주입을 받아서 만들어졌다
		UserService userService = new UserServiceImpl(); 
		userService.setUserDao(userDao);
		
	-->

	<bean id="userService" class="kr.or.ddit.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
	</bean>

	<!-- 생성자 주입 -->
	<bean id="userServiceCons" class="kr.or.ddit.user.service.UserServiceImpl">
		<constructor-arg ref="userDao"></constructor-arg>
	</bean>
	
	<!-- Prototype : 해당 빈을 dl, di 할 때 마다 매번 새롭게 만든 객체를 반환  -->
	<bean id="userServicePrototype" class="kr.or.ddit.user.service.UserServiceImpl"
		scope="prototype">
		<property name="userDao" ref="userDao" />
	</bean>
	
	<!--  list, set, map 컬렉션 객체를 스프링 빈으로 등록  : xml로 해당 객체를 만들 수 있는지 확인 -->
	<!-- 	property를 사용하면 setter 로 주입을 하겠다는 의미  -->
	<bean id="collectionBean" class="kr.or.ddit.ioc.CollectionBean">
		<property name="list">
			<list>
				<value>brown</value>
				<value>sally</value>
				<value>cony</value>
			</list>
		</property>
		<property name="map">
			<map>
<!-- 				<entry key="" key-ref="객체를 지정할 때 사용 - 키는 객체도 가능하므로 "></entry> -->
				<entry key="userid" value="brown"/>
				<entry key="usernm" value="브라운"/>
			</map>
		</property>
		<property name="set">
			<set>
				<value>s-brown</value>
				<value>s-cony</value>
				<value>s-sally</value>
			</set>
		</property>
	<property name="properties">
		<props>
			<prop key="userid">brown</prop>
			<prop key="usernm">브라운</prop>
		</props>
	</property>
	</bean>	
	
<!-- 	properties 파일의 값을 스프링 빈의 값으로 주입하기 
		db와 연결을 하려면 일단 properties의 값을 가져와야 한다 
		- context를 설정해줘야 한다 (namespace에서)
		- spring에서 제공해줌  - ${}를 사용하여 값을 가져온다 ( 표현식 )
		
		에러) 윈도우에 등록되는 환경변수를 가져온다
		- 사용자 계정이랑 동일한 값을 가져온다 
		
		property-placeholder는 설정한 파일의 값만 로딩하는 것이 아니라 os의 환경변수도 같이 로딩한다
		dbinfo.properties에 선언한 username 속성은 os의 사용자 이름에 해당하는 변수와 겹친다
		
		해결방안
		1 ) system-properties-mode (속성 ) = "NEVER"로 설정해줘야 한다 
		 ==> system-property는 로딩하지 않고 location에 지정한 파일에서만 속성을 로딩한다
		2 ) jdbc를 사용하여 속성값을 분명하게 설정해준다  
		
-->
	<context:property-placeholder location = "classpath:/kr/or/ddit/config/db/dbinfo.properties"
	/>
	
	<bean id="dbConfig" class="kr.or.ddit.ioc.DBConfig">
<!-- 	${}안에 키값을 넣어줘야 한다 - dbinfo.properties안의 값을 가져오기 위함   -->
			<property name="driverClassName" value="${jdbc.driverClassName}"/>	
			<property name="url" value="${jdbc.url}"/>	
			<property name="username" value="${jdbc.username}"/>	
			<property name="password" value="${jdbc.password}"/>	
	</bean>
	
	</beans>
