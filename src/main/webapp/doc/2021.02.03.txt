객체 검증과 에러 메시지
보안이 중요한 사이트를 만들 때에 검증이 필요


검증을 하는 방법

server side 검증
1. spring  Validator
	구현방법 : 구현 클래스 만들기
	interface Validator를 구현
	
2. JSR-303(규약은 계속 추가/수정 됨)
	어노테이션을 이용		==> command 객체에 적용 
	@NotNull
	@Min, @Max
	@Size(min,max)
	@Pattern(정규식)

	ex. 네이버 비밀번호 - 변경할 때 최근 바꾼 비밀번호로 변경할 수 없다 (검증) : 복잡한 검증은 jsr로 할 수 없다 - db로 해야됨
	==>간단한 검증만 가능하다
	 

1번 : 구체적으로 작성 가능, 복잡한 로직 검증 가능
2번 : 간단한 형태로만 검증 가능


resourceBundle 스프링 빈 등록

container

	parent : Model -msg 등록 (답이 정해져 있는건 아니다)
	 
	child  : Controller
	
<정리 - 작업내용>

1. resourceBundle 파일 준비 (error.properties...)
2. messageSource 스프링 빈 등록 (ReloadableResourceBundleMessageSource)
3. validator, controller에 validate 메소드 실행
4. jsp <form:errors path="커맨드객체.필드"> ==> 해당 필드에 에러가 있을때만 메세지를 표현

===================================================================================

spring message (언어)
spring message :  <spring:message code="LANG"/>
				spring message :  <spring:message code="GREETING" arguments="brown"/>
				
===================================================================================

view Resolver : controller가 반환하는 view name을 이용하여 해당 요청을 생성할 view 객체를 선택 

복수의 view resolver 등록이 가능
view resolver의 우선순위를 설정하여, 적용될 순서를 결정할 수 있다 

기존 : internalResourceViewResolver
추가 : BeanNameViewResolver
	⇒ 컨트롤러가 반환하는 view name과 동일한 이름의 스프링 빈이 있으면
	   해당 스프링 빈을 view 객체로 사용 



***** internalResourceViewResolver 사용시 주의점
	⇒ prefix, surrfix 조합에 의해 생성된 문자열에 해당하는 리소스(jsp)가 없어도 
	   검증을 하지않고 응답으로 내보낸다. (검증 기능이 없다) 
	즉, 파일이 존재하지 않을 경우 404 에러 발생

→ 우선순위를 가장 최 하위로 둔다 


UPDATE users SET filename='test.jpg', realfilename='d:\\upload\test.jpg'
WHERE userid = 'sally';
commit;

///

localhost/file/fileDownloadview?userid=sally


엑셀 만드는 법
1.jsp xls 만 가능 >> 실제론 html xlsx 불가
1-1/ xlsx 를 사용하려면 poi를 사용해야함
2. java api 가능


ExeclDownloadView
1. ajax
2. excel down (필수) 
3. tomcat 9 ver.
4. 사내 시스템 구현


//
SELECT column_name,b.comments
FROM USER_TAB_COMMENTS a, USER_COL_COMMENTS b
WHERE a.TABLE_NAME = b.TABLE_NAME
AND a.COLUMN_NAME = b.COLUMN_NAME
AND a.TABLE_NAME = 'USERS'
ORDER BY




**Interceptor / filter 의 차이점 이해하기
 

