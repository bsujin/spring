
spring 관련 jar

(https://mvnrepository.com/search?q=spring) 
에서  - context, core, web, beans, web MVC, testContext, jdbc
	   4.3.30.RELEASE - 버전

+ 추가로 사용하는 jar
junit - test
jstl
logback - logging


우리가 사용할 객체를 스프링 프레임워크(컨테이너)에서 생성할 수 있도록 설명서를 작성(xml, java)


스프링 빈 객체를 주입 받을 수 있는 조건 : 주입을 받는 객체도 스프링 빈으로 등록이 되어 있어야 한다
								즉, 스프링 컨테이너에서 관리가 되는 객체여야 한다
ex) userService 객체에 userDao 스프링 빈을 주입(DI) 하려면 userService 객체도 스프링 빈 이어야 한다

	userService 객체가 스프링 빈이 아니지만 스프링 컨테이너 (applicationContext) 객체를 참조하고 있으면 DL은 가능하다.
	- 프레임워크 사용은 제어를 넘겨주기 위해 사용하는데 제어가 나한테 있으면 좋지 않다
	
주입(DI)방식
	1. setter : setter 메소드가 존재해야함 ( xml, java 설정 파일 )
	2. 생 성 자 : 주입받으려는 빈을 인자로 하는 생성자기 존재 해야함 ( xml, java 설정파일 )
	3. 어노테이션 : @Resource, @Autowired, @Imjection ( xml, java에서 설정 가능하나 잘 드러나지 않음 ) ==> 각기 어노테이션 사용 방법은 비슷, 회사마다 설정이 다를수 있다
	

scope : bean의 속성 ( jsp와 다르다 ), singleton(default - 설정을 안하면 default로 설정된다 ) , prototype이 존재 
		- 현재까지 사용한것은 id, class 
		
디자인 패턴 - singleton : 특정 클래스의 인스턴스가 메모리상에서 하나만 존재하도록 하는 패턴 (생성과 관련된 패턴)
spring scope - singleton : id 당 하나의 객체를 만든다, bean 엘리멘트를 선언시 중복된 class를 사용 가능
							동일한 클래스의 객체가 스프링 컨테이너 상에서는 여러개 존재하는 것이 가능하다 
							스프링 컨테이너에서 빈의 식별 단위는 id 

ref, value-ref : 스프링 빈을 주입할 때 사용하는 속성 
				 해당 속성에 들어오는 문자열은 스프링 빈의 이름 (id)이어야 한다.


bean 엘레멘트를 대체할 수 있는 방법
- 기존 : 스프링 빈을 하나씩 선언
	<bean ... * 선언하려고 하는 갯수만큼 >
   개선 :  component-scan 이용
  		 웹에서 자주 사용하는 모듈(레이얼) - controller, service, repository(dao)
  	1.  구현 클래스에 어노테이션을 적용 (@Controller, @Service, @Repository)
 	2. componnent-sacn 엘레멘트를 xml에 선언
  		==> 특정 패키지 밑에 등록된 클래스를 스캔
 	@Controller, @Service, @Repository 어노테이션이 붙은 클래스들을 스프링 빈으로 등록
 	
 	context를 추가
 	
 	

 